# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Geodatabase2Geopackage
                                 A QGIS plugin
 Copy all feature classes from a geodatabase to an empty geopackage
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-26
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Daniel Laguna Ruiz/AMAYA
        email                : daniel.laguna@juntadeandalucia.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import Qgis, QgsVectorLayer, QgsVectorFileWriter

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gdb2gpkg_dialog import Geodatabase2GeopackageDialog
import os.path

from osgeo import ogr
from shutil import copyfile

class Geodatabase2Geopackage:
    """QGIS Plugin Implementation."""

    def resolve(self, name, basepath=None):
      #Return basepath of plugin
      if not basepath:
        basepath = os.path.dirname(os.path.realpath(__file__))
      return os.path.join(basepath, name)

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Geodatabase2Geopackage_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&gdb2gpkg')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Geodatabase2Geopackage', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gdb2gpkg/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Geodatabase to Geopackage'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&gdb2gpkg'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_source_folder(self):
      dirname = QFileDialog.getExistingDirectory(
        self.dlg,
        "Select source geodatabase ",
        "",
        QFileDialog.ShowDirsOnly)
      self.dlg.lineEditSourceFolder.setText(dirname)

    def select_destination_file(self):
      filename, _filter = QFileDialog.getSaveFileName(
        self.dlg,
        "Select destination geopackage",
        "",
        '*.gpkg')
      self.dlg.lineEditDestinationFile.setText(filename)

    def valid_parameters(self):
      if (self.dlg.lineEditSourceFolder.text() != '' and
        self.dlg.lineEditDestinationFile.text() != ''):
        return True
      else:
        return False

    def copy_layers(self, geodatabase, geopackage):
      if (self.valid_parameters()):
        #disable copy button
        self.dlg.pushButtonGo.setEnabled(False)

        #Copy empty geopackage to destination file path
        copyfile( self.resolve("empty.gpkg"), geopackage )

        #Prepare progress bar
        self.dlg.progressBar.setValue(0)
        self.dlg.progressBar.setMaximum(100)

        fileEncoding = "UTF-8"
        driver = ogr.GetDriverByName("OpenFileGDB")
        data = driver.Open(geodatabase, 0)

        #List all layers in the file geodatabase
        feature_class_list = []
        for i in data:
          foo = i.GetName()
          feature_class_list.append(foo)

        #Prepare progress bar
        total_features = len(feature_class_list)
        current_feature = 0
        count = current_feature*100/total_features

        #Write to geopackage
        for fc in feature_class_list:
          gdbLyr = QgsVectorLayer("{0}|layername={1}".format(geodatabase, fc), fc, "ogr")
          options = QgsVectorFileWriter.SaveVectorOptions()
          options.driverName = "GPKG"
          options.layerName = fc
          options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
          options.EditionCapability = 0 #CanAddNewLayer 
          QgsVectorFileWriter.writeAsVectorFormat(gdbLyr, geopackage, options)

          current_feature += 1
          #update progress bar
          count = current_feature*100/total_features
          self.dlg.progressBar.setValue( count )

        #Enable copy button
        self.dlg.pushButtonGo.setEnabled(True)
        QMessageBox.information(None, "Completed", "Process completed successfully.")
        self.dlg.close()
      else:
        QMessageBox.information(None, "DEBUG:", "You must select a gdb and a gpkg.")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
          self.first_start = False
          self.dlg = Geodatabase2GeopackageDialog()
          self.dlg.pushButtonSource.clicked.connect(self.select_source_folder)
          self.dlg.pushButtonDestination.clicked.connect(self.select_destination_file)
          self.dlg.pushButtonGo.setEnabled(True)
          self.dlg.pushButtonGo.clicked.connect( lambda: self.copy_layers( self.dlg.lineEditSourceFolder.text(), self.dlg.lineEditDestinationFile.text()) )

        # show the dialog
        self.dlg.show()
        self.dlg.setFixedSize(self.dlg.size());
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
          # Do something useful here - delete the line containing pass and
          # substitute with your code.
          pass
